[{"permalink":"//","layout":"default","title":"jekyll-rtd-theme","content":"# jekyll-rtd-theme\n\n![CI](https://github.com/rundocs/jekyll-rtd-theme/workflows/CI/badge.svg?branch=develop)\n![jsDelivr](https://data.jsdelivr.com/v1/package/gh/rundocs/jekyll-rtd-theme/badge)\n\nJust another documentation theme compatible with GitHub Pages\n\n## What it does?\n\nThis theme is inspired by [sphinx-rtd-theme](https://github.com/readthedocs/sphinx_rtd_theme) and refactored with:\n\n- [@primer/css](https://github.com/primer/css)\n- [github-pages](https://github.com/github/pages-gem) ([dependency versions](https://pages.github.com/versions/))\n\n## Quick start\n\n```yml\nremote_theme: rundocs/jekyll-rtd-theme\n```\n\nYou can [generate](https://github.com/rundocs/starter-slim/generate) with the same files and folders from [rundocs/starter-slim](https://github.com/rundocs/starter-slim/)\n\n## Usage\n\nDocumentation that can guide how to create with Github pages, please refer to [rundocs.io](https://rundocs.io) for details\n\n## Features\n\n- Shortcodes (Toasts card, mermaid)\n- Pages Plugins (emoji, gist, avatar, mentions)\n- Auto generate sidebar\n- [Attribute List Definitions](https://kramdown.gettalong.org/syntax.html#attribute-list-definitions) (Primer/css utilities, Font Awesome 4)\n- Service worker (caches)\n- SEO (404, robots.txt, sitemap.xml)\n- Canonical Link (Open Graph, Twitter Card, Schema data)\n\n## Options\n\n| name | default value | description |\n| ------------- | -------------------- | ----------------- |\n| `title` | repo name | |\n| `description` | repo description | |\n| `url` | user domain or cname | |\n| `baseurl` | repo name | |\n| `lang` | `en` | |\n| `direction` | `auto` | `ltr` or `rtl` |\n| `highlighter` | `rouge` | Cannot be changed |\n\n```yml\n# folders sort\nreadme_index:\n with_frontmatter: true\n\nmeta:\n key1: value1\n key2: value2\n .\n .\n .\n\ngoogle:\n gtag:\n adsense:\n\nmathjax: # this will prased to json, default: {}\n\nmermaid:\n custom: # mermaid link\n initialize: # this will prased to json, default: {}\n\nscss: # also _includes/extra/styles.scss\nscript: # also _includes/extra/script.js\n\ntranslate:\n # shortcodes\n danger:\n note:\n tip:\n warning:\n # 404\n not_found:\n # copyright\n revision:\n # search\n searching:\n search:\n search_docs:\n search_results:\n search_results_found: # the \"#\" in this translate will replaced with results size!\n search_results_not_found:\n\nplugins:\n - jemoji\n - jekyll-avatar\n - jekyll-mentions\n```\n\n## The license\n\nThe theme is available as open source under the terms of the MIT License\n","dir":"/","name":"README.md","path":"README.md","url":"/"},{"layout":"default","title":"COMPILACION DE UN KERNEL LINUX A MEDIDA","content":"# COMPILACION DE UN KERNEL LINUX A MEDIDA\n\n## Introducción\n\nEn este apartado descargaremos una versión de kernel desde la página https://kernel.org/ y haremos lo siguiente:\n\n- Instalar dependencias\n\n- Descargar Kernel\n\n- Compilar Kernel\n\n- Crear imagen .deb\n\n- Instalar archivo .deb creado anteriormente\n\n- Reducir módulos del Kernel\n\nLa versión de Kernel que he elegido para este apartado es la versión 6.0.7.\n\n---\n\n## Instalar Dependencias\n\n---\n\nEn este punto lo primero que haremos será instalar los paquetes necesarios para poder compilar el kernel y posteriormente crear el fichero .deb correspondiente.\n\nPrimero actualizamos:\n\n```shell\njoseju@debian:~$ sudo apt update\n```\n\nInstalamos las dependencias:\n```shell\njoseju@debian:~$ sudo apt install build-essential qtbase5-dev libelf-dev pkg-config \n```\n\n---\n\n## Descargar Kernel\n\n---\n\nUna vez hemos instalado las correspondientes dependencias, descargaremos el archivo del kernel:\n\n```shell\njoseju@debian:~/compilacion_kernel$ wget https://mirrors.edge.kernel.org/pub/linux/kernel/v6.x/linux-6.0.7.tar.xz\n```\n\n---Reducir módulos del Kernel\n\njoseju@debian:~/compilacion_kernel$ tar -xvf linux-6.0.7.tar.xz\n```\n\nPosteriormente, accedemos a la carpeta y compilamos el archivo oldconfig:\n\n```shell\njoseju@debian:~/compilacion_kernel/linux-6.0.7$ make oldconfig\n```\n- Al compilarlo nos hará muchas preguntas, dejamos pulsado intro ya que por defecto indicamos que no.\n\nUna vez hecho esto, se nos habrá generado un fichero oculto llamado .config:\n\n```shell\nusuario@debian:~/compilacion_kernel/linux-6.0.7$ ls -la | egrep '.config'\n-rw-r--r-- 1 usuario usuario 59 nov 3 16:00 .cocciconfig\n-rw-r--r-- 1 usuario usuario 252431 nov 17 14:12 .config\n-rw-r--r-- 1 usuario usuario 555 nov 3 16:00 Kconfig\n```\n\nEn este fichero se almacenan los módulos que vienen por defecto y que posteriormente deberemos ir desactivando, pero este no es el caso, asi que prodeceremos a compilar este archivo para reducir módulos automáticamente:\n\n```shell\nusuario@debian:~/compilacion_kernel/linux-6.0.7$ make localmodconfig\n```\n\n---\n\n## Crear imagen .deb\n\n---\n\nAhora que hemos reducido los módulos, procederemos a generar nuestra imagen .deb del kernel, para ello:\n\n```shell\nusuario@debian:~/compilacion_kernel/linux-6.0.7$ make -j12 bindeb-pkg\n```\n\n- Esto tardará un rato ya que antes de reducir considerablemente el número de módulos, se tienen que cargar los que vienen por defecto.\n\n---\n\n## Instalar archivo .deb creado anteriormente\n\n---\n\nPrimero, verificamos la versión del kernel que tenemos actualmente en funcionamiento:\n\n```shell\nusuario@debian:~$ uname -r\n5.10.0-18-amd64\n```\n\nAhora que hemos compilado y generado el fichero .deb, procederemos a instalar el fichero .deb que se nos ha generado y este se añadirá al grub como una nueva versión de kernel._\n\n```shell\nusuario@debian:~/compilacion_kernel/linux-6.0.7$ sudo dpkg -i ../linux-image-6.0.7_6.0.7-1_amd64.deb\n```\n\nEn este punto reiniciamos la máquina y comprobamos que la nueva versión del kernel funciona correctmente\n\n```shell\nusuario@debian:~$ sudo reboot\n```\n\n---\n\n## Reducir módulos del Kernel\n\n---\n\nPrimero, comprobamos la versión de kernel actual tras el reinicio:\n\n```shell\nusuario@debian:~$ uname -r\n6.0.7\n```\n\nAhora que tenemos cargada la nueva versión de kernel en nuestro sistema operativo, debemos reducir el número de módulos a medida de las características del hardware de nuestro equipo.\n\nPor ejemplo nuestro equipo funciona con un procesador intel, pues los módulos que sean amd los podemos desactivar.\n\nAntes de editar los módulos, comprobamos los módulos que tiene actualmente el fichero .config:\n\n```shell\nusuario@debian:~/compilacion_kernel/linux-6.0.7$ egrep '=y' .config | wc -l\n1627\nusuario@debian:~/compilacion_kernel/linux-6.0.7$ egrep '=m' .config | wc -l\n193\n```\n\nPara editar los módulos del kernel ejecutamos el siguiente comando:\n\n```shell\nusuario@debian:~/compilacion_kernel/linux-6.0.7$ make xconfig\n```\n\nNos aparecerá una ventana gráfica donde deberemos ir desmarcando los módulos que sean necesarios.","dir":"/test/","name":"compilacion-kernel.md","path":"test/compilacion-kernel.md","url":"/test/compilacion-kernel.html"},{"sort":1,"permalink":"/test/","layout":"default","title":"Introducción","content":"<h1 id=\"introducción\">Introducción</h1>\n\n<p>En este apartado descargaremos una versión de kernel desde la página https://kernel.org/ y haremos lo siguiente:</p>\n\n<ul>\n <li>\n <p>Instalar dependencias</p>\n </li>\n <li>\n <p>Descargar Kernel</p>\n </li>\n <li>\n <p>Compilar Kernel</p>\n </li>\n <li>\n <p>Crear imagen .deb</p>\n </li>\n <li>\n <p>Instalar archivo .deb creado anteriormente</p>\n </li>\n <li>\n <p>Reducir módulos del Kernel</p>\n </li>\n</ul>\n\n<p>La versión de Kernel que he elegido para este apartado es la versión 6.0.7.</p>\n","dir":"/test/","name":"README.md","path":"test/README.md","url":"/test/"}]